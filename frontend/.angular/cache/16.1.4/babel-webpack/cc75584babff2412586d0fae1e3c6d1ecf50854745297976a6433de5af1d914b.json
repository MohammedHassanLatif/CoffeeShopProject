{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nconst JWTS_LOCAL_KEY = 'JWTS_LOCAL_KEY';\nconst JWTS_ACTIVE_INDEX_KEY = 'JWTS_ACTIVE_INDEX_KEY';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.url = environment.auth0.url;\n      this.audience = environment.auth0.audience;\n      this.clientId = environment.auth0.clientId;\n      this.callbackURL = environment.auth0.callbackURL;\n    }\n    build_login_link(callbackPath = '') {\n      let link = 'https://';\n      link += this.url + '.auth0.com';\n      link += '/authorize?';\n      link += 'audience=' + this.audience + '&';\n      link += 'response_type=token&';\n      link += 'client_id=' + this.clientId + '&';\n      link += 'redirect_uri=' + this.callbackURL + callbackPath;\n      return link;\n    }\n    // invoked in app.component on load\n    check_token_fragment() {\n      // parse the fragment\n      const fragment = window.location.hash.substr(1).split('&')[0].split('=');\n      // check if the fragment includes the access token\n      if (fragment[0] === 'access_token') {\n        // add the access token to the jwt\n        this.token = fragment[1];\n        // save jwts to localstore\n        this.set_jwt();\n      }\n    }\n    set_jwt() {\n      localStorage.setItem(JWTS_LOCAL_KEY, this.token);\n      if (this.token) {\n        this.decodeJWT(this.token);\n      }\n    }\n    load_jwts() {\n      this.token = localStorage.getItem(JWTS_LOCAL_KEY) || null;\n      if (this.token) {\n        this.decodeJWT(this.token);\n      }\n    }\n    activeJWT() {\n      return this.token;\n    }\n    decodeJWT(token) {\n      const jwtservice = new JwtHelperService();\n      this.payload = jwtservice.decodeToken(token);\n      return this.payload;\n    }\n    logout() {\n      this.token = '';\n      this.payload = null;\n      this.set_jwt();\n    }\n    can(permission) {\n      return this.payload && this.payload.permissions && this.payload.permissions.length && this.payload.permissions.indexOf(permission) >= 0;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}