{"ast":null,"code":"import { Injectable, Inject } from '@angular/core';\nimport { JwtHelperService } from './jwthelper.service';\nimport { JWT_OPTIONS } from './jwtoptions.token';\nimport { from } from \"rxjs\";\nimport { mergeMap } from 'rxjs/operators';\nimport { parse } from 'url';\nvar JwtInterceptor = /** @class */function () {\n  function JwtInterceptor(config, jwtHelper) {\n    this.jwtHelper = jwtHelper;\n    this.tokenGetter = config.tokenGetter;\n    this.headerName = config.headerName || 'Authorization';\n    this.authScheme = config.authScheme || config.authScheme === '' ? config.authScheme : 'Bearer ';\n    this.whitelistedDomains = config.whitelistedDomains || [];\n    this.blacklistedRoutes = config.blacklistedRoutes || [];\n    this.throwNoTokenError = config.throwNoTokenError || false;\n    this.skipWhenExpired = config.skipWhenExpired;\n  }\n  JwtInterceptor.prototype.isWhitelistedDomain = function (request) {\n    var requestUrl = parse(request.url, false, true);\n    return requestUrl.host === null || this.whitelistedDomains.findIndex(function (domain) {\n      return typeof domain === 'string' ? domain === requestUrl.host : domain instanceof RegExp ? domain.test(requestUrl.host) : false;\n    }) > -1;\n  };\n  JwtInterceptor.prototype.isBlacklistedRoute = function (request) {\n    var url = request.url;\n    return this.blacklistedRoutes.findIndex(function (route) {\n      return typeof route === 'string' ? route === url : route instanceof RegExp ? route.test(url) : false;\n    }) > -1;\n  };\n  JwtInterceptor.prototype.handleInterception = function (token, request, next) {\n    var tokenIsExpired = false;\n    if (!token && this.throwNoTokenError) {\n      throw new Error('Could not get token from tokenGetter function.');\n    }\n    if (this.skipWhenExpired) {\n      tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;\n    }\n    if (token && tokenIsExpired && this.skipWhenExpired) {\n      request = request.clone();\n    } else if (token) {\n      request = request.clone({\n        setHeaders: (_a = {}, _a[this.headerName] = \"\" + this.authScheme + token, _a)\n      });\n    }\n    return next.handle(request);\n    var _a;\n  };\n  JwtInterceptor.prototype.intercept = function (request, next) {\n    var _this = this;\n    if (!this.isWhitelistedDomain(request) || this.isBlacklistedRoute(request)) {\n      return next.handle(request);\n    }\n    var token = this.tokenGetter();\n    if (token instanceof Promise) {\n      return from(token).pipe(mergeMap(function (asyncToken) {\n        return _this.handleInterception(asyncToken, request, next);\n      }));\n    } else {\n      return this.handleInterception(token, request, next);\n    }\n  };\n  JwtInterceptor.decorators = [{\n    type: Injectable\n  }];\n  /** @nocollapse */\n  JwtInterceptor.ctorParameters = function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [JWT_OPTIONS]\n      }]\n    }, {\n      type: JwtHelperService\n    }];\n  };\n  return JwtInterceptor;\n}();\nexport { JwtInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}