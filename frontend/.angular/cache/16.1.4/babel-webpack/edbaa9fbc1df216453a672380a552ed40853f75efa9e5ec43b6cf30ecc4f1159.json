{"ast":null,"code":"// tslint:disable:no-bitwise\nimport { Injectable, Inject } from '@angular/core';\nimport { JWT_OPTIONS } from './jwtoptions.token';\nvar JwtHelperService = /** @class */function () {\n  function JwtHelperService(config) {\n    if (config === void 0) {\n      config = null;\n    }\n    this.tokenGetter = config && config.tokenGetter || function () {};\n  }\n  JwtHelperService.prototype.urlBase64Decode = function (str) {\n    var output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n      case 0:\n        {\n          break;\n        }\n      case 2:\n        {\n          output += '==';\n          break;\n        }\n      case 3:\n        {\n          output += '=';\n          break;\n        }\n      default:\n        {\n          throw 'Illegal base64url string!';\n        }\n    }\n    return this.b64DecodeUnicode(output);\n  };\n  // credits for decoder goes to https://github.com/atk\n  // credits for decoder goes to https://github.com/atk\n  JwtHelperService.prototype.b64decode =\n  // credits for decoder goes to https://github.com/atk\n  function (str) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var output = '';\n    str = String(str).replace(/=+$/, '');\n    if (str.length % 4 === 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n    // initialize result and counters\n    var bc = 0, bs = void 0, buffer = void 0, idx = 0;\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  };\n  JwtHelperService.prototype.b64DecodeUnicode = function (str) {\n    return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n  };\n  JwtHelperService.prototype.decodeToken = function (token) {\n    if (token === void 0) {\n      token = this.tokenGetter();\n    }\n    if (token == null || token === '') {\n      return null;\n    }\n    var parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error('The inspected token doesn\\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.');\n    }\n    var decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error('Cannot decode the token.');\n    }\n    return JSON.parse(decoded);\n  };\n  JwtHelperService.prototype.getTokenExpirationDate = function (token) {\n    if (token === void 0) {\n      token = this.tokenGetter();\n    }\n    var decoded;\n    decoded = this.decodeToken(token);\n    if (!decoded || !decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n    var date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n    return date;\n  };\n  JwtHelperService.prototype.isTokenExpired = function (token, offsetSeconds) {\n    if (token === void 0) {\n      token = this.tokenGetter();\n    }\n    if (token == null || token === '') {\n      return true;\n    }\n    var date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n    if (date === null) {\n      return true;\n    }\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n  };\n  JwtHelperService.decorators = [{\n    type: Injectable\n  }];\n  /** @nocollapse */\n  JwtHelperService.ctorParameters = function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [JWT_OPTIONS]\n      }]\n    }];\n  };\n  return JwtHelperService;\n}();\nexport { JwtHelperService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}